{"version":3,"sources":["webpack://BluePend/webpack/universalModuleDefinition","webpack://BluePend/webpack/bootstrap","webpack://BluePend/./src/index.ts","webpack://BluePend/external {\"commonjs\":\"blue-queue-pipe\",\"commonjs2\":\"blue-queue-pipe\",\"amd\":\"blue-queue-pipe\",\"root\":\"BlueQuePipe\"}","webpack://BluePend/./src/status.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","blue_queue_pipe__WEBPACK_IMPORTED_MODULE_0__","blue_queue_pipe__WEBPACK_IMPORTED_MODULE_0___default","_status__WEBPACK_IMPORTED_MODULE_1__","DEFAULT_KEY","BluePend","opts","options","pends","hook","ctx","fn","args","apply","statusHook","_this","_a","createHook","successHook","failHook","pendingHook","_b","excludes","CREATE","_c","runQueue","keyOptions","status","getStatus","runQueueHandler","length","data","getData","SUCCESS","FAIL","PENDING","listen","expire","success","fail","queue","_d","queueOptions","keyOpts","currentPend","getListen","queueCallBlack","expireTime","Date","currentQueue","getQueue","removeListen","enqueue","currentStatus","setStatus","currentQueue_1","a","forEach","_queue","setData","removeData","run","load","undefined","STATUS"],"mappings":"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","file":"blue-pend.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blue-queue-pipe\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blue-queue-pipe\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BluePend\"] = factory(require(\"blue-queue-pipe\"));\n\telse\n\t\troot[\"BluePend\"] = factory(root[\"BlueQuePipe\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./static\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","//队列模块\r\nimport BlueQueuePipe from \"blue-queue-pipe\";\r\nimport { STATUS } from \"./status\";\r\n//生成状态判断\r\nfunction conditionStatus(opts) {\r\n    var _a = opts.key, key = _a === void 0 ? this.key : _a, status = opts.status;\r\n    return status === this.getStatus({ key: key });\r\n}\r\n//默认key\r\nvar DEFAULT_KEY = \"DEFAULT\";\r\nvar BluePend = /** @class */ (function () {\r\n    //构造\r\n    function BluePend(opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this.options = opts;\r\n        this.key = opts.key || DEFAULT_KEY;\r\n        this.pends = {};\r\n    }\r\n    //hook处理\r\n    BluePend.prototype.hook = function (ctx, fn, args) {\r\n        if (args === void 0) { args = []; }\r\n        if (typeof fn === \"function\") {\r\n            return fn.apply(ctx, args);\r\n        }\r\n        return fn;\r\n    };\r\n    //如果遇到了非CREATE状态，返回true\r\n    //默认排除了CREATE状态，实际场景中，\r\n    //CREATE状态只是为了铺垫第一次执行\r\n    BluePend.prototype.statusHook = function (opts) {\r\n        var _this = this;\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, createHook = opts.createHook, successHook = opts.successHook, failHook = opts.failHook, pendingHook = opts.pendingHook, _b = opts.excludes, excludes = _b === void 0 ? [STATUS.CREATE] : _b, _c = opts.runQueue, runQueue = _c === void 0 ? true : _c;\r\n        var keyOptions = {\r\n            key: key,\r\n        };\r\n        var status = this.getStatus(keyOptions);\r\n        //执行对应的状态队列\r\n        var runQueueHandler = function () {\r\n            //执行对应的状态队列\r\n            _this.runQueue({\r\n                key: key,\r\n                status: status,\r\n            });\r\n        };\r\n        //如果当前的状态存在于的排除中，这里将不会进行处理\r\n        for (var i = 0; i < excludes.length; i++) {\r\n            var excStatus = excludes[i];\r\n            if (excStatus === status)\r\n                return false;\r\n        }\r\n        //apply处理参数\r\n        var data = [this.getData(keyOptions)];\r\n        switch (status) {\r\n            case STATUS.CREATE:\r\n                this.hook(null, createHook, data);\r\n                return true;\r\n            case STATUS.SUCCESS:\r\n                this.hook(null, successHook, data);\r\n                //执行对应的状态队列\r\n                runQueue && runQueueHandler();\r\n                return true;\r\n            case STATUS.FAIL:\r\n                this.hook(null, failHook, data);\r\n                //执行对应的状态队列\r\n                runQueue && runQueueHandler();\r\n                return true;\r\n            case STATUS.PENDING:\r\n                this.hook(null, pendingHook, data);\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    };\r\n    /*设置异步数据 CREATE[PENDING] -> SUCCESS[FAIL]\r\n     如果当前为第一次写入唯一key时，第一次的状态为CREATE，\r\n     如果在紧接着的处理中，下一个写入到唯一key的状态为PENDING，\r\n     如果在写入的过程中，发现当前状态以及被修改为SUCCESS，这里将不会触发\r\n     [堆积过程[CREATE|PENDING]] -> [回调流程[SUCCESS|FAIL]]*/\r\n    BluePend.prototype.listen = function (opts) {\r\n        var _this = this;\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, \r\n        //有效期 毫秒\r\n        _b = opts.expire, \r\n        //有效期 毫秒\r\n        expire = _b === void 0 ? 0 : _b, \r\n        //队列处理\r\n        success = opts.success, \r\n        //队列异常处理\r\n        fail = opts.fail, \r\n        //队列\r\n        _c = opts.queue, \r\n        //队列\r\n        queue = _c === void 0 ? [] : _c, \r\n        //针对 blue-queue-pipe 的队列配置\r\n        _d = opts.queueOptions, \r\n        //针对 blue-queue-pipe 的队列配置\r\n        queueOptions = _d === void 0 ? {} : _d;\r\n        //key配置\r\n        var keyOpts = {\r\n            key: key,\r\n        };\r\n        //获取当前的同步项\r\n        var currentPend = this.getListen(keyOpts);\r\n        //队列回调\r\n        var queueCallBlack = function (data, status) {\r\n            if (status === STATUS.SUCCESS) {\r\n                _this.hook(null, success, [data]);\r\n            }\r\n            else {\r\n                _this.hook(null, fail, [data]);\r\n            }\r\n        };\r\n        //存在当前的pend配置\r\n        if (!currentPend) {\r\n            //当前队列数据\r\n            var currentQueue_1 = new BlueQueuePipe(queueOptions);\r\n            //预计的超时队列处理\r\n            if (expire && queue.length > 0) {\r\n                queue.forEach(function (_queue) {\r\n                    //这里处理的queue都属于处理过的callback相关内容\r\n                    currentQueue_1.enqueue(_queue);\r\n                });\r\n            }\r\n            //写入队列回调\r\n            currentQueue_1.enqueue(queueCallBlack);\r\n            //存储队列组\r\n            this.pends[key] = {\r\n                //当前队列\r\n                queue: currentQueue_1,\r\n                //当前同步状态 未存在记录时，第一次未CREATE状态\r\n                status: STATUS.CREATE,\r\n                //数据\r\n                data: null,\r\n                //有效期 毫秒\r\n                expire: expire,\r\n                //实际的实效时间\r\n                expireTime: expire ? +new Date() + expire : 0,\r\n            };\r\n        }\r\n        else {\r\n            //存在失效时间\r\n            if (currentPend.expire && currentPend.expireTime < +new Date()) {\r\n                //获取到当前的队列\r\n                var currentQueue = this.getQueue(keyOpts).queue;\r\n                //还有未处理的队列内容 存在于多频，超时处理较短情况来处理\r\n                if (currentQueue.length > 0) {\r\n                    opts.queue = currentQueue;\r\n                }\r\n                //当前设置的回调进行失效处理\r\n                queueCallBlack = null;\r\n                //删除异步规则\r\n                this.removeListen(keyOpts);\r\n                //设置新的规则\r\n                return this.listen(opts);\r\n            }\r\n            //写入队列\r\n            this.getQueue(keyOpts).enqueue(queueCallBlack);\r\n            //当前状态\r\n            var currentStatus = this.getStatus(keyOpts);\r\n            //如果已经是成功或者失败状态，这里就不进行pending类型写入\r\n            if (currentStatus === STATUS.SUCCESS || currentStatus === STATUS.FAIL) {\r\n                //返回注销当前监听\r\n                return this;\r\n            }\r\n            //写成pending状态\r\n            this.setStatus({\r\n                key: key,\r\n                status: STATUS.PENDING,\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    //设置\r\n    BluePend.prototype.getListen = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a;\r\n        return this.pends[key];\r\n    };\r\n    //删除全部的监听\r\n    BluePend.prototype.removeListen = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a;\r\n        delete this.pends[key];\r\n    };\r\n    //设置异步数据\r\n    BluePend.prototype.setData = function (opts) {\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, _b = opts.data, data = _b === void 0 ? null : _b;\r\n        return (this.getListen({ key: key }).data = data);\r\n    };\r\n    //获取数据\r\n    BluePend.prototype.getData = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return this.getListen(opts).data;\r\n    };\r\n    //删除同步数据\r\n    BluePend.prototype.removeData = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        this.getListen(opts).data = null;\r\n    };\r\n    //获取异步队列\r\n    BluePend.prototype.getQueue = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return this.getListen(opts).queue;\r\n    };\r\n    //设置异步状态\r\n    BluePend.prototype.setStatus = function (opts) {\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, status = opts.status;\r\n        this.getListen({ key: key }).status = status;\r\n    };\r\n    //设置异步状态\r\n    BluePend.prototype.getStatus = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return this.getListen(opts).status;\r\n    };\r\n    //执行同步队列\r\n    BluePend.prototype.runQueue = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, _b = opts.status, status = _b === void 0 ? STATUS.SUCCESS : _b;\r\n        this.getQueue({ key: key }).run(this.getData({ key: key }), status);\r\n    };\r\n    //完毕处理\r\n    BluePend.prototype.load = function (opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a = opts.key, key = _a === void 0 ? this.key : _a, _b = opts.data, data = _b === void 0 ? null : _b, _c = opts.status, status = _c === void 0 ? STATUS.SUCCESS : _c;\r\n        //load只受理SUCCESS和FAIL状态\r\n        if (!(status === STATUS.SUCCESS || status === STATUS.FAIL))\r\n            return;\r\n        //修改成功状态\r\n        this.setStatus({\r\n            key: key,\r\n            status: status,\r\n        });\r\n        //设置当前key相关的数据值\r\n        if (data !== undefined) {\r\n            //设置数据\r\n            this.setData({\r\n                key: key,\r\n                data: data,\r\n            });\r\n        }\r\n        //执行同步队列\r\n        this.runQueue({\r\n            key: key,\r\n            status: status,\r\n        });\r\n    };\r\n    //通过静态属性获取相关状态值\r\n    BluePend.STATUS = STATUS;\r\n    return BluePend;\r\n}());\r\nexport default BluePend;\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","//异步状态 相关的状态\r\nexport var STATUS;\r\n(function (STATUS) {\r\n    //创建状态\r\n    STATUS[\"CREATE\"] = \"CREATE\";\r\n    //等待被消费\r\n    STATUS[\"PENDING\"] = \"PENDING\";\r\n    //成功状态\r\n    STATUS[\"SUCCESS\"] = \"SUCCESS\";\r\n    //异常状态\r\n    STATUS[\"FAIL\"] = \"FAIL\";\r\n})(STATUS || (STATUS = {}));\r\n"],"sourceRoot":""}